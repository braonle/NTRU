#pragma once

/*struct Ret
{
	char* data; //Указатель на данные
	int size; //Размер данных в байтах
};*/

extern "C"
{
	//Должна вызываться самой первой!!!!
	//Может принимать только числа: N = 167, 251, 503, означающие количество байт,
	//в одном блоке и определяющие набор параметров шифра, если подаётся другое число, возвращает 0!
	//Возвращает идентификатор сессии расшифрования
	int sessionDecInit(int n);

	//Может принимать только числа: N = 167, 251, 503, означающие количество байт
	//в одном блоке и определяющие набор параметров шифра, если подаётся другое число, возвращает 0!
	//Принимает открытый ключ, длины N
	//Возвращает идентификатор сессии шифрования
	//буффер нужно освобождать самостоятельно
	int sessionEncInit(int n, char* public_key);

	//Принимает объём шифротекста и идентификатор сессии шифрования
	//Возвращает объём шифротекста
	int getEncSize(int data_size, int id);

	//Принимает текст с длиной, указатель на буфер для шифротекста и идентификатор сессии шифрования
	//буфферы нужно освобождать самостоятельно
	void encrypt(char* in, int in_size, char* out, int id);

	//Возвращает публичный ключ (N байт), который необходим для инициализации сессии шифрования
	//Принимает идентификатор сессии расшифрования
	//буффер нужно освобождать самостоятельно
	char* getPublicKey(int id);

	//(Буфер целесообразно выделять объёмом в 8 раз меньше объёма шифротекста)
	//Принимает шифротекст и его длину, указатель на буфер для шифротекста и идентификатор сессии расшифрования
	//Возвращает длину текста
	//буфферs нужно освобождать самостоятельно
	int decrypt(char* in, int in_size, char* out, int id);

	//Завершает сессию шифрования
	//Принимает идентификатор сессии
	void sessionEncClose(int id);

	//Завершает сессию расшифрования
	//Принимает идентификатор сессии
	void sessionDecClose(int id);

	void ptrdel(char *ptr);
}
